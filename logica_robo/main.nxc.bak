// Right Motor        -> port A
// Left  Motor        -> port B
// Claw               -> port C
// Touch Sensor       -> port 3
// Ultrasonic Sensor  -> port 2
// Light Sensor       -> port 4

// By default
// receive on MAILBOX1
// send on MAILBOX10

// black color range on light sensor

// silver color range on light sensor

#include "BLUETOOTH.h"

// PROTOCOL CONSTANTS
#define REQUEST  1
#define RESPONSE 2
#define POSITION 3
#define ACTIVATE 10
#define STATUS   11

#define wait(seconds); Wait(seconds*1000);

#define LEFT_MOTOR  OUT_A
#define RIGHT_MOTOR OUT_B
#define CLAW        OUT_C
#define BOTH_MOTORS OUT_AB

#define ULTRASONIC_SENSOR  IN_2
#define TOUCH_SENSOR       IN_3
#define LIGHT_SENSOR       IN_4

#define TOUCH_SENSOR_STATE SENSOR_3
#define LIGHT_SENSOR_STATE SENSOR_2

#define TRACK 18
#define WHEEL_DIAMETER 5.6
#define DEFAULT_MOTOR_POWER 50
#define DEFAULT_CLAW_POWER  15
#define CLOCKWISE 0
#define COUNTERCLOCKWISE 1

void GoFoward(byte power, byte seconds);
void GoBackward(byte power, byte seconds);
void configSensors();
void grab();
void drop();
bool getMailboxMessage(string &message);
byte getRobotDistance(byte port);
bool isTouched();
char sendMessage(string message);
byte getLightReflection();
bool readSupervisorMessage();
void protocolMessageParser();


// send to supervisor all the
// necessary informations
// right and left motors information
// at all and etcetera
task sendRobotInfo() {
    string message;
    while (true)
          message = NumToStr(getRobotDistance(IN_2));
          sendMessage(message);
          Wait(1000);
}

// global variable
// looks like a mutex
// for robot
bool isRobotBusy = false;

//task main ()
//{
//     StartTask(readMailbox);
//}



// use, by default mailbox 1
// read a mailbox and show it
// on NXT display
task readMailbox() {
     while (true) {
          TextOut(0, LCD_LINE1, "Waiting message");
          string in;
          if (ReceiveMessage(0, true, in) == NO_ERR) {
               SendMessage(10, "3;44;33");
               ClearScreen();
               TextOut(0, LCD_LINE2, "received");
               TextOut(0, LCD_LINE3, in);
               Wait(3000);
          }
          else Wait(500);
          ClearScreen();
     }
}

task main ()
{
     StartTask(readMailbox);
}


void GoFoward(byte power, byte seconds) {
     OnFwdSync(OUT_AB, power, 0);
     wait(seconds);
     Off(OUT_AB);
}

void GoBackward(byte power, byte seconds) {
     OnRevSync(OUT_AB, power, 0);
     wait(seconds);
     Off(OUT_AB);
}

// set up the sensors connected
// to NXT, following init description
void configSensors() {
    SetSensorTouch(TOUCH_SENSOR);
    SetSensorUltrasonic(ULTRASONIC_SENSOR);
    SetSensorLight(LIGHT_SENSOR);
}

//fwd
// turn the motor connected in the CLAW
// over 90 deg
void grab() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, 90);
}

// rev
// turn the motor connected in the CLAW
// over -90 deg
void drop() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, -90);
}

// Return true if ReadMessage with success
// false cc
bool getMailboxMessage(string &message) {
     bool successOnRead;
     successOnRead = (ReceiveMessage(MAILBOX1, true, message) == NO_ERR ? true : false);
     return successOnRead;
}

// read and return the robot
// distance to any object
byte getRobotDistance(byte port) {
     return SensorUS(port);
}

char sendMessage(string message) {
     return SendMessage(MAILBOX10, message);
}

bool isTouched() {
     return (Sensor(S3) ? true : false);
}

byte getLightReflection() {
     return Sensor(S4);
}

bool readSupervisorMessage() {
     string supervisorMessage;
     bool successOnRead;
     successOnRead = getMailboxMessage(supervisorMessage);
     if (successOnRead) {
          return true;
     }
     return successOnRead;
     
}

void protocolMessageParser() {}

