// Right Motor        -> port A
// Left  Motor        -> port B
// Claw               -> port C
// Touch Sensor       -> port 3
// Ultrasonic Sensor  -> port 2
// Light Sensor       -> port 4

#include "RPP.h"

#define wait(seconds); Wait(seconds*1000);

#define LEFT_MOTOR  OUT_A
#define RIGHT_MOTOR OUT_B
#define CLAW        OUT_C
#define BOTH_MOTORS OUT_AB

#define ULTRASONIC_SENSOR  IN_2
#define TOUCH_SENSOR       IN_3
#define LIGHT_SENSOR       IN_4

#define TOUCH_SENSOR_STATE SENSOR_3
#define LIGHT_SENSOR_STATE SENSOR_2

#define TRACK 18
#define WHEEL_DIAMETER 5.6
#define DEFAULT_MOTOR_POWER 50
#define DEFAULT_CLAW_POWER  15
#define CLOCKWISE 0
#define COUNTERCLOCKWISE 1

// ----------------------------------------------

void GoFoward(byte power, byte seconds);
void GoBackward(byte power, byte seconds);
void configSensors();
void grab();
void drop();
bool getMailboxMessage(string &message);
byte getRobotDistance(byte port);
bool isTouched();
byte getLightReflection();
bool readSupervisorMessage();
void protocolMessageParser(string message, byte result[]);
void handleRequest(byte requestType);

/*
-----------------------
    Global Variables
-----------------------
*/
mutex robotMutex;
mutex messageMutex;

byte robotStatus = UCHAR_MAX;

bool isRobotBusy = false;
string receivedMessage, msgToSend = "";
int cont_x = 0;
int cont_y = 0;


// send to supervisor all the
// necessary informations
// right and left motors information
// at all and etcetera
task sendRobotInfo()
{
    string message;
    while (true)
          message = NumToStr(getRobotDistance(IN_2));
          sendMessage(message);
          Wait(1000);
}



// use, by default mailbox 1
// read a mailbox and show it
// on NXT display
task readSupervisorMessages()
{
     byte requestType;
     string recvdMessage;
     while (true) {
          TextOut(0, LCD_LINE1, "Wait for msg...");
          if (readMessage(recvdMessage))
          {
               Acquire(messageMutex);
               receivedMessage = recvdMessage;
               TextOut(0, LCD_LINE2, "received");
               TextOut(0, LCD_LINE3, receivedMessage);
               Wait(500);
               Release(messageMutex);
          }
          ClearScreen();
     }
}

task sendMailbox() {
	//TextOut(0, LCD_LINE3, in);
	//Wait(3000);
     	string result;
	     while (true) {
	     	if(strcmp(receivedMessage, "1") == 0)
	     	while(true){
	     	TextOut(0, LCD_LINE2, "iniciou envio");
		  result = StrCat("3;", NumToStr(cont_x), ";", NumToStr(cont_y));
		  SendMessage(MAILBOX10, result);
		  TextOut(0, LCD_LINE1, receivedMessage);
		  cont_x++;
		  cont_y += 2;
		  Wait(1000);
		  ClearScreen();
     	     }
     }
}

task main ()
{
     StartTask(readSupervisorMessages);
     StartTask(sendMailbox);
}


void handleRequest(byte requestType)
{
     switch (requestType)
     {
            case 0:
                 if (isRobotBusy) break;
                 else
                 {
                     break;
                 }
                 break;
            case 1:

     }
}

void GoFoward(byte power, byte seconds) {
     OnFwdSync(OUT_AB, power, 0);
     wait(seconds);
     Off(OUT_AB);
}

void GoBackward(byte power, byte seconds) {
     OnRevSync(OUT_AB, power, 0);
     wait(seconds);
     Off(OUT_AB);
}

// set up the sensors connected
// to NXT, following init description
void configSensors() {
    SetSensorTouch(TOUCH_SENSOR);
    SetSensorUltrasonic(ULTRASONIC_SENSOR);
    SetSensorLight(LIGHT_SENSOR);
}

//fwd
// turn the motor connected in the CLAW
// over 90 deg
void grab() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, 90);
}

// rev
// turn the motor connected in the CLAW
// over -90 deg
void drop() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, -90);
}

// Return true if ReadMessage with success
// false cc
bool getMailboxMessage(string &message) {
     bool successOnRead;
     successOnRead = (ReceiveMessage(MAILBOX1, true, message) == NO_ERR ? true : false);
     return successOnRead;
}

// read and return the robot
// distance to any object
byte getRobotDistance(byte port) {
     return SensorUS(port);
}

bool isTouched() {
     return (Sensor(S3) ? true : false);
}

byte getLightReflection() {
     return Sensor(S4);
}

bool readSupervisorMessage() {
     string supervisorMessage;
     bool successOnRead;
     successOnRead = getMailboxMessage(supervisorMessage);
     if (successOnRead) {
          return true;
     }
     return successOnRead;
     
}

void protocolMessageParser(string message, byte result[])
{
     string type, value;
     byte type_b, value_b;
     type = message[0];
     value = message[2];
     type_b = StrToNum(type);
     value_b = StrToNum(value);
     result[0] = type_b;
     result[1] = value_b;
}
