// Motor roda direita ->  porta A
// Motor roda esquerda -> porta B
// Motor Garra ->         porta C
// Sensor de toque ->     porta 3
// Sensor ultrassonico -> porta 2
// Sensor de Luz       -> porta 4

//void GoFoward(char pwr, unsgined sec);
// Gira no sentido da roda que ta girando para
// frente

#define LEFT_MOTOR  OUT_A
#define RIGHT_MOTOR OUT_B
#define CLAW        OUT_C
#define BOTH_MOTORS OUT_AB
#define ULTRASONIC  S2
#define TOUCH       S3
#define LIGHT       S2

#define TRACK 18
#define WHEEL_DIAMETER 5.6
#define DEFAULT_MOTOR_POWER 50
#define CLOCKWISE 0
#define COUNTERCLOCKWISE 1

void GoFoward(byte power, byte seconds);
void GoBackward(byte power, byte seconds);
// Utilizara os defines, para melhor conveniencia
void TurnAround(byte direction, byte degrees);
void configSensors();
void grab();
void drop();
void getMailboxMessage(byte mailboxIdx);
float inch2cm(byte inch);

task main() {
  //OnFwdSync(OUT_AB, 60, 0);
  //Wait(3000);
  //Wait(5000);
  //Off(OUT_AB);
  //OnRevSync(OUT_AB, 60, 0);
  //Wait(5000);
  //Off(OUT_AB);
  //TurnAround(CLOCKWISE, 45);
  //OnFwd(OUT_A, 50);
  //OnRev(OUT_B, 50);
  //Wait(3000);
  //Off(OUT_AB);
  //TurnAround(COUNTERCLOCKWISE, 90);
  //grab();
  //grab();
  configSensors();
  OnFwdSync(BOTH_MOTORS, 40, 0);
  until(SENSOR_3 == 1);
  Off(BOTH_MOTORS);
}

// use, by default mailbox 1
// read a mailbox and show it
// on NXT display
task readMailBox() {
     MessageHasArrieved(1);
}

void GoFoward(byte power, byte seconds) {
     OnFwdSync(OUT_AB, power, 0);
     Wait(seconds*1000);
     Off(OUT_AB);
}

void GoBackward(byte power, byte seconds) {
     OnRevSync(OUT_AB, power, 0);
     Wait(seconds*1000);
     Off(OUT_AB);
}

// inputs
// -> direction must be
//      clockwise      counterclockwise
//          0                 1
//       CLOCKWISE     COUNTERCLOCKWISE
// -> degrees - how many degress it'll turn
void TurnAround(byte direction, byte degrees) {
     float trackCircunference, wheelCircunference;
     float distancePerDeg, distance2turn;
     long tachos2turn;
     trackCircunference = TRACK*PI;
     distancePerDeg = trackCircunference/360;
     distance2turn = distancePerDeg*degrees;
     wheelCircunference = WHEEL_DIAMETER*PI;
     tachos2turn = (distance2turn/wheelCircunference)*360;
     // left motor must go foward
     //OUT_A
     if (direction) {
        //RotateMotor(OUT_A, DEFAULT_MOTOR_POWER, tachos2turn);
        //RotateMotor(OUT_B, -DEFAULT_MOTOR_POWER, tachos2turn);
        RotateMotorEx(OUT_AB, DEFAULT_MOTOR_POWER, tachos2turn, 100, true, true);
     }
     // right motor must go foward
     // OUT_B
     else {
        //RotateMotor(OUT_B, DEFAULT_MOTOR_POWER, tachos2turn);
        //RotateMotor(OUT_A, -DEFAULT_MOTOR_POWER, tachos2turn);
     }
}

// configura os sensores com base
// no comentario feito no inicio
// do arquivo
void configSensors() {
    SetSensorTouch(TOUCH);
    SetSensorUltrasonic(ULTRASONIC);
    SetSensorLight(LIGHT);
}

//fwd
// turn the motor connected in the CLAW
// over 90 deg
void grab() {
   RotateMotor(CLAW, 15, 90);
}

// rev
// turn the motor connected in the CLAW
// over -90 deg
void drop() {
   RotateMotor(CLAW, 15, -90);
}

void getMailboxMessage(byte mailboxIdx) {}

float inch2cm(byte inch) {}
