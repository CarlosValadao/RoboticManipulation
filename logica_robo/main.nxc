// Right Motor        -> port A
// Left  Motor        -> port B
// Claw               -> port C
// Touch Sensor       -> port 3
// Ultrasonic Sensor  -> port 2
// Light Sensor       -> port 4

#include "RPP.h"

#define LEFT_MOTOR  OUT_A
#define RIGHT_MOTOR OUT_B
#define CLAW        OUT_C
#define BOTH_MOTORS OUT_AB

#define ULTRASONIC_SENSOR  IN_2
#define TOUCH_SENSOR       IN_3
#define LIGHT_SENSOR       IN_4

#define TOUCH_SENSOR_STATE SENSOR_3
#define LIGHT_SENSOR_STATE SENSOR_2

#define TRACK 18
#define WHEEL_DIAMETER 5.6
#define DEFAULT_MOTOR_POWER 50
#define DEFAULT_CLAW_POWER  15
#define CLOCKWISE 0
#define COUNTERCLOCKWISE 1

// ----------------------------------------------

void GoFoward(byte power, byte seconds);
void GoBackward(byte power, byte seconds);
void configSensors();
void grab();
void drop();
bool getMailboxMessage(string &message);
byte getRobotDistance(byte port);
bool isTouched();
byte getLightReflection();
bool readSupervisorMessage();
void protocolMessageParser(string message, byte result[]);
void handleRequest(byte requestType);

/*
-----------------------
    Global Variables
-----------------------
*/
mutex robotMutex;
mutex messageMutex;

bool isRobotBusy = false;

byte robotStatus = UCHAR_MAX;
byte requestCode = UCHAR_MAX;

string requestMsg, msgToSend = "";
string dataMsgToSend, responseToRequest = "";

long cont_x = 0;
long cont_y = 0;


/*
Send robot position X and Y coordinates
every one sec
*/
task sendRobotPosition()
{
     startSendRobotPosition:
          while (isRobotBusy)
          {
               formatDataMessage(cont_x, cont_y, dataMsgToSend);
               sendMessage(dataMsgToSend, POSITION);
               cont_x = cont_x + 1;
               cont_y = cont_y + 2;
               Wait(1000);
          }
     while (isRobotBusy == false)
     {
          ClearScreen();
          TextOut(0, LCD_LINE1, " Wait Supervisor");
          TextOut(0, LCD_LINE2, "Command");
     }
     goto startSendRobotPosition;
}

/*
Read Supervisor messages and
show them on NXT display
*/
task readSupervisorMessages()
{
     startReadSupervisorMessages:
          byte requestType;
          string recvdMessage;
          while (isRobotBusy)
          {
               TextOut(0, LCD_LINE1, "Wait for msg...");
               if (readMessage(recvdMessage))
               {
                    Acquire(messageMutex);
                    requestCode = parseMessage(recvdMessage);
                    requestMsg = recvdMessage;
                    Release(messageMutex);
                    ClearScreen();
                    TextOut(0, LCD_LINE1, "Received");
                    TextOut(0, LCD_LINE2, requestMsg);
                    handleRequest(requestCode);
                    Wait(1000);
               }
               ClearScreen();
          }
     while (isRobotBusy == false)
     goto startReadSupervisorMessages;
}

task main ()
{
     isRobotBusy = true;
     StartTask(readSupervisorMessages);
     StartTask(sendRobotPosition);
}


void handleRequest(byte requestType)
{
     if (isRobotBusy == false)
     {
          Acquire(messageMutex);
          formatMessage(robotStatus, msgToSend);
          sendMessage(msgToSend, RESPONSE);
          Release(messageMutex);
     }
     else if (isRobotBusy && requestType == 1)
     {
          PlayTone(2000, 500);
     }
}

void GoFoward(byte power, byte seconds) {
     OnFwdSync(OUT_AB, power, 0);
     Wait(seconds);
     Off(OUT_AB);
}

void GoBackward(byte power, byte seconds) {
     OnRevSync(OUT_AB, power, 0);
     Wait(seconds);
     Off(OUT_AB);
}

// set up the sensors connected
// to NXT, following init description
void configSensors() {
    SetSensorTouch(TOUCH_SENSOR);
    SetSensorUltrasonic(ULTRASONIC_SENSOR);
    SetSensorLight(LIGHT_SENSOR);
}

//fwd
// turn the motor connected in the CLAW
// over 90 deg
void grab() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, 90);
}

// rev
// turn the motor connected in the CLAW
// over -90 deg
void drop() {
   RotateMotor(CLAW, DEFAULT_CLAW_POWER, -90);
}

// Return true if ReadMessage with success
// false cc
bool getMailboxMessage(string &message) {
     bool successOnRead;
     successOnRead = (ReceiveMessage(MAILBOX1, true, message) == NO_ERR ? true : false);
     return successOnRead;
}

// read and return the robot
// distance to any object
byte getRobotDistance(byte port) {
     return SensorUS(port);
}

bool isTouched() {
     return (Sensor(S3) ? true : false);
}

byte getLightReflection() {
     return Sensor(S4);
}

bool readSupervisorMessage() {
     string supervisorMessage;
     bool successOnRead;
     successOnRead = getMailboxMessage(supervisorMessage);
     if (successOnRead) {
          return true;
     }
     return successOnRead;
     
}

void protocolMessageParser(string message, byte result[])
{
     string type, value;
     byte type_b, value_b;
     type = message[0];
     value = message[2];
     type_b = StrToNum(type);
     value_b = StrToNum(value);
     result[0] = type_b;
     result[1] = value_b;
}
