#define DISTANCIA_ENTRE_RODAS 14.8
#define RAIO_RODA 5.6 // cm
#define MOTOR_E OUT_A // Motor da esquerda
#define MOTOR_D OUT_B // Mootor da direita
#define MOTOR_ED OUT_AB


void girar_90_esq(){
    byte grau = (DISTANCIA_ENTRE_RODAS*360)/(RAIO_RODA*8);
    // Pq 0 ou 100?
    RotateMotorEx(MOTOR_ED, 40, grau, 100, true, true);
}

void girar_90_dir(){
    byte grau = (DISTANCIA_ENTRE_RODAS*360)/(RAIO_RODA*8);
    // Pq 0 ou 100?
    RotateMotorEx(MOTOR_ED, 40, grau, -100, true, true);
}

// Testar os diferentes valores de wait e os coeficientes do pid como 50, 50, 50
// O bom do PID seria não dar o tranco que dá ao ligar o motor, mas talvez n seja necessário se estiver sincronizado


void girar_90_esq_V2(){
    byte grau = (DISTANCIA_ENTRE_RODAS*360)/(RAIO_RODA*8);
    RotateMotorPID(MOTOR_E, -40, grau, 40, 40, 90);
    RotateMotorPID(MOTOR_D, 40, grau, 40, 40, 90);
    Wait(3000);// Testar mudando esses valores aqui e ver oq acontece
    Off(MOTOR_ED);
}

void girar_90_dir_V2(){
    byte grau = (DISTANCIA_ENTRE_RODAS*360)/(RAIO_RODA*8);
    RotateMotorPID(MOTOR_E, 40, grau, 40, 40, 90);
    RotateMotorPID(MOTOR_D, -40, grau, 40, 40, 90);
    Wait(3000);// Testar mudando esses valores aqui e ver oq acontece
    Off(MOTOR_ED);
}

task main(){

}